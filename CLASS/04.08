1. 
!! !cp 

기존에 있던 명령 행을 변경가능

  1. 캐럿을 이용한 히스토리 확장
  mdsum *.jp| .... (jpg인데 잘못 씀)

  jp -> jpg 가능
  <패턴>:s/(기존 from_cmd)/ (바꿀 to_cmd)
  !! (이전 명령)
  ex) !!:s/jp/jpg
  !md5sum/jp/jpg
  
2. 총정리
  1. basic programs
  형식
  - <프로그램> <옵션> <인수>
  - -ch
  - 인수 : 디렉터리, .... (프로그램 따라 다름)
  - ex) 옵션은 프로그램 뒤 ls -l /etc/passwd
  
  1) date 시간을 나타냄
  표준출력을 뜨기 때문에 date| cut -c1 (가능)
  
  2) who : user 이름이 나옴. 로그인한 유저정보
      출력 : usrs/your_name
      
  3) echo : 프린트한다. 공백이 있어도 그냥 출력(공백 무시), 변수가 있어도 출력 가능

  4) ls : 파일 디렉토리 조회
    - l 을 붙이면 정확히 조회
    - a 숨겨놓은 파일까지 조회 -la하면 숨겨진 파일까지 전부 조회
    - d: directory
      ..... (더 다양하게 있음)
    - 멀티컬럼으로 stout
    - 인수가 디렉토리
    - 파일명을 쓰면 이름만 그대로 반환
    ex) ls grades

  5) cat + 파일 1, 2 ....n
    - concatenate 
    - 여러개의 파일을 순차적으로 붙여서 읽어줌
    - 인수로 파일명
    - 파일 이어붙이기 가능 (컨텐츠 확장할 때 사용한다.)

  6) wc 
    - 라인, 단어, 글자 수 세기
    - l, -w, -c
    - 인수가 없으면 stdin으로 받는다.

  7) cp
    - copy from<A> to<B>
    - 동일한 파일 생성
    - 다른 디렉토리일 경우
      - 상대경로로 쓰는 게 편함
      - 같은 파일명일 경우 이름 안 써도 됨
        ex) cp b ./notes
      - 여러 파일 복사 기능
        cp 1 2 3 4 5 6
        1-5 from, 6 to 
        마지막에 쓴 디렉터리로 넘어감
        
      Q. OSS에서 note/b를 복사해서 가져오는 코드 작성하기
      runner 
      OSS
      ㄴnotes
        ㄴb
      cp ./OSS/notes/b .(현재 디렉터리)

  8) mv
    - move
    - mv fromA toB
    mv 1 2 3 4 5 "6"
    - 파일명 변경할 때
      mv a aa # a 사라지고  aa

    - 디렉토리 A -> B 
    sample -> notes
    - 디렉터리를 모두 옮길수도 있다.

    **주의: 기존에 존재하는 파일명일 경우, 덮어쓴다. 잘 확인

    9) rm
      - remove
      - 파일명, 디렉터리
        -디렉터리가 인수로 오면 비어있어야된다.
      -r 디렉터리
      -여러개 지울 수 있다.
      
      rm a b c d
      rm *.txt
      - 쉘은 지우면 복원 불가, 제대로 확인하고 지울 것


    10) rmdir
      -empty

      ##디렉터리 관련 명령
      
      1) pwd
      print working directory
      current directory

      2) cd
      - .. 상위
      - . 현재
      - cd만 치면 home로 감

      Q. notes -> runner로 한번에
       cd ../..

      3) mkdir
      - make directory
      
      4) rmdir

      5) ln
        -link files
        -ln from A to B
        -a, b 
        - 메모리 효율, 항상 동기화 됨
        - 다른 디렉토리에 동일한 파일을 위치시키고 싶을 때 사용
        - ls -l로 확인가능 2일경우 링크된 파일 존재
        - 파일 하나를 삭제해도 다른 파일은 삭제되지 않는다.

      ## 패턴매칭
      1. asterisk
        -"*" 이름
        - zero or more
        - cat * 현재 디렉터리에 있는 모든 파일
        - chapter* # chapter로 시작하는 모든 파일
        Q. t가 있는 모든 파일
            *t*
            
      2. ?
        - 한 개 매칭
        echo ? # 글자 1개로 된 파일 전부
        echo ?? # bb bb.txt(x)

      3. [ , ]
      -특정 글자 1개 매칭되는 것 전부
      [abcd] # or
      [02468] #
      [0-9] # 모든 숫자
      [a-z]
      
      Q. o를 제외한 모든 소문자
      [a-n p-z]
      [!o] !는 except

    4. escape letter
      - 공백, $, ....
      - \ 
      - cat file_a file_b
      - cat hello\ world
      '',""
      - echo는 예외

    Q. 'who are you?'라는 디렉터리를 생성하고 목록 조회하는 코드
      
        mkdir who\ are\ you?
        ls who\ are\ you?

        mkdir 'who are you?'
        ls 'who are you?'

        mkdir "who are you?"
        ls "who are you?"

        파일 내용이 없어 ls 사용하면 아무것도 출력안됨
        ls -l로 확인 or ls 사용  



  ## 리다이렉션
    - 입력 <, <<
    - 출력 >
    - 에러 2
      - "" > cp_pateern1

  ## 파이프라인
    - |
    - 표준 입출력을 이용하는 모든 프로그램은 파이프를 사용할 수 있다.
    - A|B|...
    - "필터" : 파이프라인을 사용할 수 있는, 입출력 값을 수정할 수 있는 프로그램

    - grep, cut, 필터 프로그램

  ##
  - ; : 여러 명령 한줄에 쓸때
  ex) date;pwd


  - 오래 걸리는 명령 백그라운드로 보내기
    - <명령> &
      ex) cat bigdat > file1 &
    - 다른 프로그램 동시에 수행 가능
    - stdin (조심)
      - 
    
  - ps 
    - 프로세스 정보 나타냄
    - PID : id
    - TIME : 작동한 시간
    - CMD : 프로세스 이름
    - -f 옵션 : 자세히 나타냄


   ## 명령 2
   1. cut
    - cut <인수> 파일명
    - -c, -f, -d
    - -c2-5 , 
    - f: tab으로 구분
    Q. 10번째 글자부터 끝까지
      cut -c10-

    -d<구분자>
      - d: 
      - cut -d: -f1
      - 구분자가 없으면 기본값은 tap


    2. paste 
      - cut 과 반대
      - 컬럼별로 데이터 붙임
      - 디폴트는 탭

    - d구분자 사용가능 
    - s : 같은 파일을 수정할 경우
    ' ' -> \t
      paste -s -d' ' file

    3. grep
      - grep <패턴> <디렉터리>
      - 패턴에 매칭되는 문자열을 가진 라인 출력
      - 매칭 없으면 아무것도 출력되지 않는다.
        grep Linux * # 파일 내부 텍스트
        .....| grep Linux # 출력에서 받은 입력값

      Q. 전체 파일에서 * 패턴 가진 것 찾기
       grep \* * ???
      
      => 패턴은 ''를 사용하는 게 좋다.
      [a-z]
      ^,$ 시작과 끝
      ^[A-Z]*
      *.txt$

      -i : 대소문자 구분 안함
      -w : 정확한 매칭만
        the -> there(x)
      -v : 반대, 포함 안되는

      -l : 해당 매칭이 있는 파일명
      -n : 라인 넘버 같이 출력

########## 중요!! (grep)

      Q. 해당 매칭이 있는 파일 갯수
        grep -l 'A' * | wc -l


    4. sort
      -정렬
      -라인별로, 오름차순 디폴트
      - -r
      - -n 숫자기준
        - 셀은 모든 인수를 문자여로 인식한다.
           str: 1, 11, 2, 3
           int : 1, 2, 3, 11

      - 특수문자, 다른 언어 중에 특수 기호 사용하는 문자 정렬 순서 주의 할 것
      -' ' # 32, \ 
      - -u: sort + uniqs

      - -o : 
        - sort file1 > file1 (x)
        - 정렬된 결과를 같은 파일에 저장
        - 


    5. uniq
      - 중복 삭제
      - 인접한 것만 고려한다.
      - -d: 결과 중 중복된 것 삭제
      - -c: 중복된 횟수 카운트

    6. tr
      - tr from_char to_char
      A에서 B로 변경
      - tr e x < input
      - 표준 입력(stdin)만 가능 파일에서 수정하는 건 안됨
      - animals.txt e -> x
      tr '[a-z]' '[A-Z]' < animals.txt
      - d: 삭제
        tr -d the
        

      
      
      


