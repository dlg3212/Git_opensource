1. grep
  많이 사용하게 될거임
  - matching
  문자열 매칭 
  ex) animal 에서 the 가 있냐 없냐
  grep the animals.txt
  vi animals.txt
  grep The animlas.txt
  출력 : snail   SSH, The Secure Shell   2005    Barrett, Daniel
  라인 전체를 출력
  
Q. The가 있는 txt파일을 전체 조회하라.
  grep The *.txt (모든 txt 파일을 조회해서 The를 출력, * 중요)
  -v : 조건 문자열이 없는 라인 출력
  ex ) grep -v The animals.txt
  The 를 제외하고 출력

Q. /usr/lib에 포함된 하위 디렉터리 개수 알아내기
  ls -l /usr/lib | cut -c1 | grep d | wc -l
  d로 시작하는 거는 디렉터리
  =d로 시작하는 라인의 개수

2. sort
-정렬 오름차순 (abcd)
-r을 붙이면 거꾸로 정렬
  ex) sort .파일명
  sort -r .파일명

숫자 정렬
  sort -n .파일명
  sort -n -r .파일명 (거꾸로 내림차순)

Q. animals.txt 3번째 필드가 숫자 오름차순 정리
  cut -f3 animals.txt | sort -n

Q. 최소값, 최댓값 출력하기
  최솟값 cut -f3 animals.txt | sort -n | head -n1
  최댓값 cut -f3 animals.txt | sort -n -r | head -n1

Q. /etc/passwd 디렉터리에 사용자 이름 추출하기
  head /etc/passwd | cut -d: -f1 10개만 출력됨
  
  head를 빼야됨 
  
  cut -d; -f1 /etc/passwd/sort 


Q. 사용자 중 root가 있는지 확인하기
  -:로 구분된 필드 중 1번째 == 사용자
  head /etc/passwd | cut -d: -f1 |grep root
  주의할 점 :
  -Root, root, ROOT 대소문자 구분해야됨 (다 다름)
  -abcroot 이것도 인식
  -_root_ = > 출력하고 싶을때 -w 인자 사용
  (스페이스)
 g root, broot, baroot,rootfile....
  "root" 이거만 인식 (이기능을 함)
  w인자를 사용
  

Q. ls head 차이
  head 나가기 = ctrl c
  head : 파일 내용 조회
  ls : 파일 이나 디렉터리 목록 조회
  


#letters 내용 조회

3. uniq 중복된 문자를 하나로 보여줌
  uniq letters
  -중복된 문자열을 제거해서 보여주되, 인접한 중복 문자열만
  -c 옵션을 넣으면 몇개인지 세어준다

Q. 성적표 (grades 파일)에서 가장 비중이 빈번하지 않은 등급부터 출력하기
   sort grades | cut -f1 | uniq -c |sort -n
   
*(sort) 순서 중요
why? : 인접한 중복 문자열을 정리하기 때문에 정렬해서 모아줘야됨
sort --> uniq
AAAAABBBBCCC -> ABC

uniq -> sort
ACBA -> AABC


---------------------------------
1. 버전 관리
  파일의 변화를 시간에 따라 저장했다가 나중에 특정 시점의 버전으로 다시 꺼내올 수 있는 시스템

  장점:
  협업할때 실수할때 돌릴수 있다
  개인이 개발할때 돌릴 수 있다.
  틀은 같고 기능을 추가할때

  틀 : 깃
2. 깃
  데이터 저장 방식 : 스냅샷을 찍듯이
  단위가 작기 때문에 메모리를 적게씀 -> 빠름

  오프라인에서도 저장가능
    if 빈 파일에 텍스트를 넣음 --> 다시 지움 (더 효율적임)
    다른 것은 파일로 저장하지만 깃은 스냅샷으로 저장
    키(key) - 밸류
      키는 고유해야됨.
      밸류는 내가 넣은 텍스트

  깃 상태 
    수정 : 파일이 변경된 상태
    커밋 : 저장
    스테이지 : 스냅샷을 찍어서 커밋할 준비가 된 상태

    수정 
    스테이징 --> 커밋 (중요!)1g

  깃 커밋 순서 :
    상태체크(변화) -> 스테이지 -> 커밋
    .....(상태체크)

1) 버전 체크
git --version
  *git -v, --version (둘다 사용)
  
  ex)
  ls -l
  ls --list
  
2) 사용자 정보 설정하기
 -name : git config --global user.name Taeho
 -email :git config --global user.email dlg32@naver.com
 
 옵션 ㅣ --global : 전체 시스템에 영향을 준다,
  프로젝트마다 다른 이름을 사용하고 싶을 경우는 옵션을 제외함

  core.editor
    vi 빠져나올 때는 : q + enter
    지금 사용하고 있는 목록을 볼 수 있다.

  git help <프로그램명>
  나갈때는 q +enter

#디렉터리
  우리가 말하는 "폴더"(아이콘으로 만들어 놓음)
  트리구조를 가짐
   animals/
     ㄴ name.txt
     ㄴ age.txt
    mammals/
      ㄴ cow.txt
    reptile/
    ㄴ
    
  하위 디렉터리 (child) - animals > mamals
    name.txt -> 파일
  상위 디렉터리 (parent) -mammals > animals
  형제 디렉터리 (sibling) -mamals , reptitle

  디렉터리의 형태는 /로 구분
    animals/mammals/cow.txt
    <디렉터리/..../파일명>
  / : 루트 디렉터리

  절대경로 : /(루트)에서 부터 시작
  상대경로 : 현재 기준
    나의 현재 위치가 mammals이다. 근데 위로 가고싶다.
    1) 절대 경로 : /..../mammals
    2)상대 경로 : ..(위로) or .
      .. : 부모
      . : 현재

    명령어
     cd : change directory

     ex) cd./mamals (아래로)
         cd../mamals (위로)
    
     pwd : print working directory (현재 디렉터리)
           current directory



 기억해야 될 명령어
 - pwd, cdㅎ
 - .. or .
 - mkdir (경로 새성)

 Q. new_dir로 이동해서 디렉터리 " "생성

3. 깃 초기화
  git init : .git에 모든 변경사항 (스냅샷)이 저장이 된다.

4. 상태 체크
  git status

 깃이 모르는 파일일 경우
 untracked -> 'add' ---> tracked

  add -> commit

  [main )root - commit) f37dfle] init comit
  1 file changed,  7 insertions(+)
  create mode 100644 animals.txt

  - branch 정보 :main
  -f37dfle :키정보
  -init commit : 메시지
   1 file changed,  7 insertions(+) : 변경사함
   
  comit add를 해야 commit을 할 수 있다.

  git status
  git add(파일명)
  git commit -m( 메시지)