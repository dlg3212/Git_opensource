 정규표현식
 grep
 ed
 !sed(5장)


 1. 정규표현식
 - 와일드 카드와 혼동하지 말 것
  * ? ....ex) chapter*.txt (2장)
 - 패턴 매칭 할 때 사용한다.
 1 line 기준
 - 가장 긴 문자열 매칭

  1. 마침표 (.)
  - any single character
  - r. #ro, rk, rc .... (하나를 의미)
  -.x. # xxx, oxo....
  -[a-zA-z] (모든 소문자 모든 대문자)


  2. ^ (caret)
  - 라인의 처음
  -[^] # not
  -[^a-z] #소문자가 아닌

  3. $ (dollar)
  - 라인의 끝
  - '^ $' #빈 줄

  4. [리스트]
  - [a-z]
  - [a-np-z] # o를 제외한 모든 소문자
  - [a-n][p-z] #나무면 다름 두문자 매칭
  - grep '[Tt]he' animal.txt
  - grep -i 'the' animals.txt

  5. *
  - zero or more
  - x* #x........ 와일드 카드에서는 x가 여러번 나올 수 있다.
  - x* # 앞글자 한정

  -x로 시작하는 단어
  x*(x)
  xx*(0)
  
  6. \+
  -1개 이상
  x\+


  7. \?
  - zero or more


  8. \{i,j\} 원하는 횟수
  -j : j번까
  -i, : i 부터 끝까지
  -,j

  -x\{10\} 10번
  -x\{1,10\}
  -x\{10,\}

  9. \(regex\)
  - back referencing이 가능하다. (재활용)
  -'\(.\)\(.\)2\1' # 동일한 알파벳 2개로 시작하는 라인 *aa.. ll..
  -abba
  - '\(a\)\(b\)\2\1' 


  
  10. regrex1\|regerx2
  -regerex1 or regerx 2

  Q. 
  1) a-f까지 매칭                        grep [a-f]
  2) b나 ab 매칭                         grep b\|ab
  3) 2번 + aaaaaab매칭                  grep 'b\|ab\|aa*b'
  4) 모든 글자 매칭                      grep '*'' 
  5) #으로 시작하는 문자 매칭             grep ^'#' 
  6) \로 끝나는 문자 매칭                 grep $'\'
  7) 대문자로 시작하지 않는 문장 매칭       grep [^A-Z]
  8) 빈줄이 아닌 모든 줄 매칭              grep[^'^ $']
  9) cookie나 cake이 포함된 줄 매칭       grep cookie \| cake
  10)w. 매칭                            grep w. 
  
 

  1. 확장
  [a-zA-z0-9_] \w
  \W(대문자는, not)
  \b : word boundary (하나만 써도 앞뒤 다됨) hello , h o 매칭
  \b<regex>\b ell
    \< 앞\> 뒤
  \s whitespace (space, tab)
  \S


  2. ed
  - 텍스트 에디터
  - line-oriented text editor
  - 인터렉티브형
  - format : ed file
    - file로 들어감
    - 라인을 세주고 정규표현식을 입력
    - 하나하나 주고 받는 식

  - 나갈때 ctrl +d 두번, c도 가능

  - 치환(a->b)하라
  [address(범위)][명령][정규식][flags]
  1,$(address)s(명령)a/b)(정규식)
  하고 $p 프린트 해야됨

  1,$s/[a-z]//g (global 없을때는 한줄만 있을때는 파일 전체, flags) (나중에 자**세히)

  Q. 모음 지우기
  1,$s/[a-z]//g

  3. sed
  1)intro
  - stream editor
  - 표준 입출력 사용 가능, 파이프라인 사용 가능
  - 인터렉티브(x)
  - 단위는 라인
  - python
  tr [a-z] [A-z]

  sed -i(저장) 's/python/PYTHON/g' animals.txt


  2) sed 실행하기
  - format: <script> <input_file> (리다이렉션도 가능) #> <out_file>
  - hello -> world
  sed -i s/hello/world/g file
  
  -i option
    - 동일한 파일에 저장한다. (in-place)
    - 임시파일을 따로 저장하고 싶을 때 -iE #fileE (파일이름 + E)


  -n option
    - p와 같이 사용하여 출력 범위 지정한다.
      sed -n '2p' file (두번째 줄만 출력)
    - 5~10줄 출력하기
      sed -n '5,10p' file ,가 range 

    - python이 있는 라인만 출력해줘
      sed -n '/python/p' file (정규표현 익숙해지기)

    - ; 으로 여러 정규식 연결 가능
    sed -n '1p:$p' file (처음부터 끝까지 출력해줘)
    sed -n '1p:$p' fileA fileB
    cat fileA fileB |sed -n'1p:$p'




  ###-e, -f
    -e : expression
    -f : file
    sed -e '1p:$p' file (다음이 정규식이다)
    sed -f '1p:$p' file (file에서 불러온다.)
    - 옵션이 없으면 1번째가 정규표현식, 2번째가 입력파일


  - sed <option> <script> <input_file> # full format

    
    
  
  ### script
  -format : <address> <cmd> <options>
  '2p'
  - address : 2
  - cmd : p
  - 5,10p
  - '3d' (3번째 라인을 지워라)

  Q. input_file 에서 python으로 시작하는 라인 삭제하고, hello -> world로 변경한 뒤 outfile에 저장하라
    sed '/^python/d; s/hello/world/g' input_file > out_file
    sed -e '/^python/d; -e s/hello/world/g' input_file > out_file



  Q. 
  1) 5번째 줄 삭제
  2)python, Python 포함 줄 삭제
  3) 처음 10개 줄 중 2번 실행
  4) 각 줄에 첫 3글자 삭제

  s'/python//g' (지우기)
  
  -p, d, s, q (quit)


  ## cmd 's'

  - foramt: s/regex/replacement/flag
  - g (global)
  - p : 해당부분 프린트
  - i : 대소문자 구분 없음

  Q. image.jpg.1 image.jpg.2 image.jpg.3
  sed\(\)//g
  sed 's/\.jpg\.?/?\.jpg/g'
  
   
  image1.jpg, image2.jpg, image3.jpg

  ## address
  - 범위 지정
  '2p'
  sed '160s/a/b/'
  sed '/apple/s/' #apple이 있는 부분에서 뭔가를 하는
  sed '/apple/!s///' # ! : not
  
  sed '160,200s/a/b/' (범위)
  sed '160,2s/a/b/' # 160만 수행하고 끝
  $
  1,$~1 # step == 2

  # 스크립트 작성
   - 파일에 커맨드라인 입력
   - 모드 변경한다.
   chmod +x file
   - 실행
   name
   ./name
   

 - 주석 #로 단다.
  - 라인 단위, 
  